{"ast":null,"code":"import { isNumber } from './DataUtils';\n/**\n * Takes a domain and user props to determine whether he provided the domain via props or if we need to calculate it.\n * @param   {AxisDomain}  domain              The potential domain from props\n * @param   {Boolean}     allowDataOverflow   from props\n * @param   {String}      axisType            from props\n * @returns {Boolean}                         `true` if domain is specified by user\n */\n\nexport function isDomainSpecifiedByUser(domain, allowDataOverflow, axisType) {\n  if (axisType === 'number' && allowDataOverflow === true && Array.isArray(domain)) {\n    var domainStart = domain === null || domain === void 0 ? void 0 : domain[0];\n    var domainEnd = domain === null || domain === void 0 ? void 0 : domain[1];\n    /*\n     * The `isNumber` check is needed because the user could also provide strings like \"dataMin\" via the domain props.\n     * In such case, we have to compute the domain from the data.\n     */\n\n    if (!!domainStart && !!domainEnd && isNumber(domainStart) && isNumber(domainEnd)) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"names":["isNumber","isDomainSpecifiedByUser","domain","allowDataOverflow","axisType","Array","isArray","domainStart","domainEnd"],"sources":["C:/Users/Ashwini/AndroidStudioProjects/web102_unit7lab-main/teammates/node_modules/recharts/es6/util/isDomainSpecifiedByUser.js"],"sourcesContent":["import { isNumber } from './DataUtils';\n/**\n * Takes a domain and user props to determine whether he provided the domain via props or if we need to calculate it.\n * @param   {AxisDomain}  domain              The potential domain from props\n * @param   {Boolean}     allowDataOverflow   from props\n * @param   {String}      axisType            from props\n * @returns {Boolean}                         `true` if domain is specified by user\n */\nexport function isDomainSpecifiedByUser(domain, allowDataOverflow, axisType) {\n  if (axisType === 'number' && allowDataOverflow === true && Array.isArray(domain)) {\n    var domainStart = domain === null || domain === void 0 ? void 0 : domain[0];\n    var domainEnd = domain === null || domain === void 0 ? void 0 : domain[1];\n\n    /*\n     * The `isNumber` check is needed because the user could also provide strings like \"dataMin\" via the domain props.\n     * In such case, we have to compute the domain from the data.\n     */\n    if (!!domainStart && !!domainEnd && isNumber(domainStart) && isNumber(domainEnd)) {\n      return true;\n    }\n  }\n  return false;\n}"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAAyCC,iBAAzC,EAA4DC,QAA5D,EAAsE;EAC3E,IAAIA,QAAQ,KAAK,QAAb,IAAyBD,iBAAiB,KAAK,IAA/C,IAAuDE,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAA3D,EAAkF;IAChF,IAAIK,WAAW,GAAGL,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAAC,CAAD,CAAxE;IACA,IAAIM,SAAS,GAAGN,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAAC,CAAD,CAAtE;IAEA;AACJ;AACA;AACA;;IACI,IAAI,CAAC,CAACK,WAAF,IAAiB,CAAC,CAACC,SAAnB,IAAgCR,QAAQ,CAACO,WAAD,CAAxC,IAAyDP,QAAQ,CAACQ,SAAD,CAArE,EAAkF;MAChF,OAAO,IAAP;IACD;EACF;;EACD,OAAO,KAAP;AACD"},"metadata":{},"sourceType":"module"}